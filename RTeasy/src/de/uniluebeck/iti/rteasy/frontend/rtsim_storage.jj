/*
 * Copyright (c) 2003-2013, University of Luebeck, Institute of Computer Engineering
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the University of Luebeck, the Institute of Computer
 *       Engineering nor the names of its contributors may be used to endorse or
 *       promote products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE UNIVERSITY OF LUEBECK OR THE INSTITUTE OF COMPUTER
 * ENGINEERING BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
 * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
 * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */



options {
  STATIC=false;
}

PARSER_BEGIN(StorageParser)

package de.uniluebeck.iti.rteasy.frontend;

import java.util.LinkedList;
import de.uniluebeck.iti.rteasy.kernel.StorageEntry;
import de.uniluebeck.iti.rteasy.RTSimGlobals;

public class StorageParser {

  private boolean hasSyntaxError = false;
  private String syntaxErrorMessage;
  private int addrWidth = 0;
  private int dataWidth = 0;

  public void setAddrWidth(int aw) { addrWidth = aw; }
  public void setDataWidth(int dw) { dataWidth = dw; }
  public StorageEntry parse() {
    StorageEntry rn = null;
    try {
      rn = storageEntry();
    }
    catch (Exception e) {
      hasSyntaxError = true;
      syntaxErrorMessage = e.getMessage();
    }
    return rn;
  }

  public boolean hasSyntaxError() {return hasSyntaxError; }
  public String getSyntaxErrorMessage() { return syntaxErrorMessage; }
  public void reset() {
    hasSyntaxError = false;
    syntaxErrorMessage = "";
  }

}

PARSER_END(StorageParser)

SKIP :
{
  " " | "\r" | "\t" | "\n" | <"#" (~["\n"])* "\n">
}

TOKEN :
{
  < BIN_NUM: "%" ("0"|"1")+ >
| < HEX_NUM: "$" (["0"-"9"] | ["A"-"F"])+ >
| < DEC_NUM: (["0"-"9"])+ >
| < COLON: ":" >
| < SEMICOLON: ";" >
| < COMMA: "," >
}

StorageEntry storageEntry() :
{ StorageEntry child = null; boolean[] addr, data; LinkedList entries = new LinkedList();}
{
  addr = number(addrWidth) <COLON> 
  data = number(dataWidth) { entries.add(RTSimGlobals.copiedBoolArray(data)); }
  ( [<COMMA>] data = number(dataWidth) { entries.add(RTSimGlobals.copiedBoolArray(data)); } )*
  <SEMICOLON>
  [ child = storageEntry() ]
  { return new StorageEntry(addr,entries,child); }
}

boolean[] number(int width) :
{ Token t; }
{
  t = <BIN_NUM> { return RTSimGlobals.string2boolArray(t.image.toString().substring(1),width,RTSimGlobals.BASE_BIN); }
| t = <HEX_NUM> { return RTSimGlobals.string2boolArray(t.image.toString().substring(1),width,RTSimGlobals.BASE_HEX); }
| t = <DEC_NUM> { return RTSimGlobals.string2boolArray(t.image.toString(),width,RTSimGlobals.BASE_DEC); }
}



