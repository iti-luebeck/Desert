/* Generated By:JJTree&JavaCC: Do not edit this line. RTSim_Parser.java */
package de.uniluebeck.iti.rteasy.frontend;

import java.util.List;
import java.util.ArrayList;
import java.io.*;
import de.uniluebeck.iti.rteasy.*;
import de.uniluebeck.iti.rteasy.kernel.*;

public class RTSim_Parser/*@bgen(jjtree)*/implements RTSim_ParserTreeConstants, RTSim_ParserConstants {/*@bgen(jjtree)*/
  protected JJTRTSim_ParserState jjtree = new JJTRTSim_ParserState();
  private boolean hasSyntaxError = false;
  private String syntaxErrorMessage;
  public List<ParseException> syntaxErrors = new ArrayList();

  void recover(ParseException ex, int recoveryPoint) {
      syntaxErrors.add(ex);
      Token t;
    do {
      t = getNextToken();
    } while (t.kind != EOF && t.kind != recoveryPoint);
  }

  public ASTRtProg parseRTProgram() {
    ASTRtProg rn = null;
    try {
      rn = rt_program();
    }
    catch (ParseException e) {
      hasSyntaxError = true;
      syntaxErrorMessage = e.getMessage();
          recover(e, SEMICOLON);
    }
    return rn;
  }

  public boolean hasSyntaxError() {return hasSyntaxError; }
  public String getSyntaxErrorMessage() { return syntaxErrorMessage; }
  public void reset() {
    hasSyntaxError = false;
    syntaxErrorMessage = "";
  }

  void jjtreeOpenNodeScope(Node n) {
    ((RTSimNode) n).setFirstToken(getToken(1));
  }

  void jjtreeCloseNodeScope(Node n) {
    ((RTSimNode) n).setLastToken(getToken(0));
  }

  final public ASTRtProg rt_program() throws ParseException {
 /*@bgen(jjtree) RtProg */
  ASTRtProg jjtn000 = new ASTRtProg(JJTRTPROG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 57:
        jj_consume_token(57);
        t = jj_consume_token(ID);
                         jjtn000.setName(t.image.toString());
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      declarations();
      statement_sequence();
      jj_consume_token(0);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
    throw new Error("Missing return statement in function");
  }

/*
void interfaceList() #InterfaceList :
{}
{
  ("in" { jjtThis.setSignalDirection(RTSimGlobals.DIR_IN); }
  |"out" { jjtThis.setSignalDirection(RTSimGlobals.DIR_OUT); })
  reg_bus_decl_list() ";"
  [interfaceList() {jjtThis.setHasNext(true);} ]
}
*/
  final public void declarations() throws ParseException {
 /*@bgen(jjtree) Decls */
  ASTDecls jjtn000 = new ASTDecls(JJTDECLS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      declaration();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECLARE:
        declarations();
                                       jjtn000.setHasNext(true);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void declaration() throws ParseException {
 /*@bgen(jjtree) Decl */
  ASTDecl jjtn000 = new ASTDecl(JJTDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);int dir;
    try {
      jj_consume_token(DECLARE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
        jj_consume_token(REGISTER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          reg_bus_decl_list();
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                                jjtreeCloseNodeScope(jjtn000);
                               jjtn000.setDeclType(RTSimGlobals.REGISTER);
          break;
        case ARRAY:
          jj_consume_token(ARRAY);
          regarray_decl_list();
                                         jjtree.closeNodeScope(jjtn000, true);
                                         jjtc000 = false;
                                         jjtreeCloseNodeScope(jjtn000);
                                        jjtn000.setDeclType(RTSimGlobals.ARRAY);
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case BUS:
      case 58:
      case 59:
        dir = bus_decl();
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtreeCloseNodeScope(jjtn000);
                      jjtn000.setDeclType(RTSimGlobals.BUS);
                      jjtn000.setSignalDirection(dir);
        break;
      case MEMORY:
        memory_decl();
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtreeCloseNodeScope(jjtn000);
                   jjtn000.setDeclType(RTSimGlobals.MEMORY);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

//void register_decl() #void :
//{}
//{
//  <REGISTER> reg_bus_decl_list()
//}
  final public int bus_decl() throws ParseException {
  int back = RTSimGlobals.UNUSED;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 58:
    case 59:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 58:
        jj_consume_token(58);
           back = RTSimGlobals.DIR_IN;
        break;
      case 59:
        jj_consume_token(59);
           back = RTSimGlobals.DIR_OUT;
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(BUS);
    reg_bus_decl_list();
    {if (true) return back;}
    throw new Error("Missing return statement in function");
  }

  final public void memory_decl() throws ParseException {
    jj_consume_token(MEMORY);
    mem_decl_list();
  }

//void regarray_decl() #void :
//{}
//{
//	<ARRAY> regarray_decl_list()
//}
  final public void reg_bus_decl_list() throws ParseException {
 /*@bgen(jjtree) RegBusDeclList */
  ASTRegBusDeclList jjtn000 = new ASTRegBusDeclList(JJTREGBUSDECLLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      reg_bus_decl();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        reg_bus_decl_list();
                                               jjtn000.setHasNext(true);
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void reg_bus_decl() throws ParseException {
 /*@bgen(jjtree) RegBusDecl */
  ASTRegBusDecl jjtn000 = new ASTRegBusDecl(JJTREGBUSDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);Token t; BitRange br;
    try {
      t = jj_consume_token(ID);
            jjtn000.setName(t.image.toString());
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        br = bit_range();
                     jjtn000.setBitRange(br);
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void mem_decl_list() throws ParseException {
 /*@bgen(jjtree) MemDeclList */
  ASTMemDeclList jjtn000 = new ASTMemDeclList(JJTMEMDECLLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      mem_decl();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        mem_decl_list();
                                       jjtn000.setHasNext(true);
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void mem_decl() throws ParseException {
 /*@bgen(jjtree) MemDecl */
  ASTMemDecl jjtn000 = new ASTMemDecl(JJTMEMDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ID);
            jjtn000.setName(t.image.toString());
      jj_consume_token(LPAREN);
      t = jj_consume_token(ID);
            jjtn000.setAddrReg(t.image.toString());
      jj_consume_token(COMMA);
      t = jj_consume_token(ID);
            jjtn000.setDataReg(t.image.toString());
      jj_consume_token(RPAREN);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void regarray_decl_list() throws ParseException {
 /*@bgen(jjtree) RegArrayDeclList */
  ASTRegArrayDeclList jjtn000 = new ASTRegArrayDeclList(JJTREGARRAYDECLLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      regar_decl();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        regarray_decl_list();
                                              jjtn000.setHasNext(true);
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void regar_decl() throws ParseException {
 /*@bgen(jjtree) RegArrayDecl */
 ASTRegArrayDecl jjtn000 = new ASTRegArrayDecl(JJTREGARRAYDECL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtreeOpenNodeScope(jjtn000);Token t; BitRange br;
    try {
      t = jj_consume_token(ID);
            jjtn000.setName(t.image.toString());
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        br = bit_range();
                     jjtn000.setBitRange(br);
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      jj_consume_token(LBRACKET);
      t = jj_consume_token(DEC_NUM);
                  jjtn000.setNumberOfRegisters(Integer.parseInt(t.image.toString()));
      jj_consume_token(RBRACKET);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public BitRange bit_range() throws ParseException {
  Token t1,t2;
    jj_consume_token(LPAREN);
    t1 = jj_consume_token(DEC_NUM);
                   t2=t1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      t2 = jj_consume_token(DEC_NUM);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    {if (true) return new BitRange(Integer.parseInt(t1.image.toString()),Integer.parseInt(t2.image.toString()));}
    throw new Error("Missing return statement in function");
  }

  final public int register_number() throws ParseException {
 Token t;
    t = jj_consume_token(DEC_NUM);
   {if (true) return Integer.parseInt(t.image.toString());}
    throw new Error("Missing return statement in function");
  }

  final public void statement_sequence() throws ParseException {
 /*@bgen(jjtree) Stat_Seq */
  ASTStat_Seq jjtn000 = new ASTStat_Seq(JJTSTAT_SEQ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      outer_parallel_statements();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PIPE:
        jj_consume_token(PIPE);
        outer_parallel_statements();
                                       jjtn000.setHas2Edges(true);
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case SWITCH:
      case READ:
      case WRITE:
      case GOTO:
      case GO:
      case NOP:
      case ID:
        statement_sequence();
                         jjtn000.setHasNext(true);
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void outer_parallel_statements() throws ParseException {
 /*@bgen(jjtree) Outer_ParStats */
  ASTOuter_ParStats jjtn000 = new ASTOuter_ParStats(JJTOUTER_PARSTATS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);String lname = null;
    try {
      if (jj_2_1(2)) {
        lname = label();
                                 jjtn000.setLabelId(lname);
      } else {
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case READ:
      case WRITE:
      case GOTO:
      case GO:
      case NOP:
      case ID:
        statement();
                jjtn000.setStatNodeType(RTSimGlobals.STAT);
        break;
      case IF:
        if_statement();
                    jjtn000.setStatNodeType(RTSimGlobals.IFSTAT);
        break;
      case SWITCH:
        switch_case_statement();
                             jjtn000.setStatNodeType(RTSimGlobals.SWITCH);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        outer_parallel_statements();
                                    jjtn000.setHasNext(true);
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void if_statement() throws ParseException {
 /*@bgen(jjtree) If_Stat */
  ASTIf_Stat jjtn000 = new ASTIf_Stat(JJTIF_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      expression();
      jj_consume_token(THEN);
      inner_parallel_statements();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        inner_parallel_statements();
                                        jjtn000.setHasElse(true);
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      jj_consume_token(FI);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void switch_case_statement() throws ParseException {
 /*@bgen(jjtree) Switch_Case_Stat */
 ASTSwitch_Case_Stat jjtn000 = new ASTSwitch_Case_Stat(JJTSWITCH_CASE_STAT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtreeOpenNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(SWITCH);
      bit_sequence();
      jj_consume_token(LBRACE);
      caselist();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASEDEFAULT:
        defaultcase();
                        jjtn000.setDef(true);
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void caselist() throws ParseException {
 /*@bgen(jjtree) CaseList */
 ASTCaseList jjtn000 = new ASTCaseList(JJTCASELIST);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtreeOpenNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(CASE);
      num_constant();
      jj_consume_token(COLON);
      inner_parallel_statements();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        caselist();
                     jjtn000.setHasNext(true);
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void defaultcase() throws ParseException {
 /*@bgen(jjtree) CaseList */
  ASTCaseList jjtn000 = new ASTCaseList(JJTCASELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
         jjtn000.setHasNext(true);
      jj_consume_token(CASEDEFAULT);
                       jjtn000.hasDefault(true);
      jj_consume_token(COLON);
                 jjtn000.setComparator(null);
      inner_parallel_statements();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void inner_parallel_statements() throws ParseException {
 /*@bgen(jjtree) Inner_ParStats */
  ASTInner_ParStats jjtn000 = new ASTInner_ParStats(JJTINNER_PARSTATS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case READ:
      case WRITE:
      case GOTO:
      case GO:
      case NOP:
      case ID:
        statement();
                 jjtn000.setStatNodeType(RTSimGlobals.STAT);
        break;
      case IF:
        if_statement();
                    jjtn000.setStatNodeType(RTSimGlobals.IFSTAT);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        inner_parallel_statements();
                                    jjtn000.setHasNext(true);
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public String label() throws ParseException {
  Token t;
    t = jj_consume_token(ID);
    jj_consume_token(COLON);
                    {if (true) return t.image.toString();}
    throw new Error("Missing return statement in function");
  }

  final public void expression() throws ParseException {
    ASTExpr jjtn001 = new ASTExpr(JJTEXPR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
    try {
      expression_and();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
      case NOR:
      case XOR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
          jj_consume_token(OR);
          jjtn001.setOp(RTSimGlobals.OR);
          break;
        case XOR:
          jj_consume_token(XOR);
          jjtn001.setOp(RTSimGlobals.XOR);
          break;
        case NOR:
          jj_consume_token(NOR);
          jjtn001.setOp(RTSimGlobals.NOR);
          break;
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        expression();
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      jjtreeCloseNodeScope(jjtn001);
    }
    }
  }

  final public void expression_and() throws ParseException {
    ASTExpr jjtn001 = new ASTExpr(JJTEXPR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
    try {
      expression_not();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case NAND:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          jj_consume_token(AND);
           jjtn001.setOp(RTSimGlobals.AND);
          break;
        case NAND:
          jj_consume_token(NAND);
           jjtn001.setOp(RTSimGlobals.NAND);
          break;
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        expression_and();
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      jjtreeCloseNodeScope(jjtn001);
    }
    }
  }

  final public void expression_not() throws ParseException {
  boolean not=false;
    ASTExpr jjtn001 = new ASTExpr(JJTEXPR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        jj_consume_token(NOT);
          not=true; jjtn001.setOp(RTSimGlobals.NOT);
        expression_not();
        break;
      case BIN_NUM:
      case HEX_NUM:
      case DEC_NUM:
      case LPAREN:
      case MINUS:
      case ID:
        expression_cmpu();
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001,  not);
      jjtreeCloseNodeScope(jjtn001);
    }
    }
  }

  final public void expression_cmpu() throws ParseException {
    ASTExpr jjtn001 = new ASTExpr(JJTEXPR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
    try {
      expression_cmpo();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NE:
      case EQ:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
          jj_consume_token(EQ);
         jjtn001.setOp(RTSimGlobals.EQ);
          break;
        case NE:
          jj_consume_token(NE);
         jjtn001.setOp(RTSimGlobals.NE);
          break;
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        expression_cmpo();
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      jjtreeCloseNodeScope(jjtn001);
    }
    }
  }

  final public void expression_cmpo() throws ParseException {
    ASTExpr jjtn001 = new ASTExpr(JJTEXPR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
    try {
      expression_plus();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LE:
      case GE:
      case LT:
      case GT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
          jj_consume_token(LT);
         jjtn001.setOp(RTSimGlobals.LT);
          break;
        case LE:
          jj_consume_token(LE);
         jjtn001.setOp(RTSimGlobals.LE);
          break;
        case GT:
          jj_consume_token(GT);
         jjtn001.setOp(RTSimGlobals.GT);
          break;
        case GE:
          jj_consume_token(GE);
         jjtn001.setOp(RTSimGlobals.GE);
          break;
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        expression_plus();
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      jjtreeCloseNodeScope(jjtn001);
    }
    }
  }

  final public void expression_plus() throws ParseException {
    ASTExpr jjtn001 = new ASTExpr(JJTEXPR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
    try {
      expression_sign();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
           jjtn001.setOp(RTSimGlobals.PLUS);
          break;
        case MINUS:
          jj_consume_token(MINUS);
            jjtn001.setOp(RTSimGlobals.MINUS);
          break;
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        expression_plus();
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      jjtreeCloseNodeScope(jjtn001);
    }
    }
  }

  final public void expression_sign() throws ParseException {
  boolean sign=false;
    ASTExpr jjtn001 = new ASTExpr(JJTEXPR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
        jj_consume_token(MINUS);
            sign = true; jjtn001.setOp(RTSimGlobals.SIGN);
        expression_sign();
        break;
      case BIN_NUM:
      case HEX_NUM:
      case DEC_NUM:
      case LPAREN:
      case ID:
        expression_leaf1();
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001,  sign);
      jjtreeCloseNodeScope(jjtn001);
    }
    }
  }

  final public void expression_leaf1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(RPAREN);
      break;
    case BIN_NUM:
    case HEX_NUM:
    case DEC_NUM:
    case ID:
      expression_leaf2();
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void expression_leaf2() throws ParseException {
 /*@bgen(jjtree) Expr */
  ASTExpr jjtn000 = new ASTExpr(JJTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIN_NUM:
      case HEX_NUM:
      case DEC_NUM:
        num_constant();
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtreeCloseNodeScope(jjtn000);
                  jjtn000.setOp(RTSimGlobals.NUM_CONST);
        break;
      case ID:
        bit_sequence();
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtreeCloseNodeScope(jjtn000);
                  jjtn000.setOp(RTSimGlobals.BIT_SEQ);
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void num_constant() throws ParseException {
 /*@bgen(jjtree) Num_Const */
  ASTNum_Const jjtn000 = new ASTNum_Const(JJTNUM_CONST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEC_NUM:
        t = jj_consume_token(DEC_NUM);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtreeCloseNodeScope(jjtn000);
                 jjtn000.setValDec(t);
        break;
      case BIN_NUM:
        t = jj_consume_token(BIN_NUM);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtreeCloseNodeScope(jjtn000);
                 jjtn000.setValBin(t);
        break;
      case HEX_NUM:
        t = jj_consume_token(HEX_NUM);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtreeCloseNodeScope(jjtn000);
                 jjtn000.setValHex(t);
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void bit_sequence() throws ParseException {
 /*@bgen(jjtree) Bit_Seq */
  ASTBit_Seq jjtn000 = new ASTBit_Seq(JJTBIT_SEQ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);Token t; BitRange br = null; int regnum;
    try {
      t = jj_consume_token(ID);
            jjtn000.setTargetId(t.image.toString());
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        br = bit_range();
                     jjtn000.setBitRange(br);
        break;
      default:
        jj_la1[37] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
      case DOT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          jj_consume_token(DOT);
          bit_sequence();
                         jjtn000.setHasNext(true);
          break;
        case LBRACKET:
          jj_consume_token(LBRACKET);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ID:
            bit_sequence();
            jj_consume_token(RBRACKET);
                                                 jjtn000.setHasReferenceRegister(true);
            break;
          case DEC_NUM:
            regnum = register_number();
            jj_consume_token(RBRACKET);
                                                jjtn000.setRegisterNumber(regnum);
        jjtn000.setHasReferenceRegister(false);
            break;
          default:
            jj_la1[38] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

//void bit_sequence_reg_array() #Bit_Seq:
//{ Token t; BitRange br = null; int regnum;}
//{
    //t = <ID> {jjtThis.setTargetId(t.image.toString());}
    //[br = bit_range(){jjtThis.setBitRange(br);}]
        //[<LBRACKET> bit_sequence() <RBRACKET> {jjtThis.setHasReferenceRegister(true);}
        //|<LBRACKET> regnum = register_number()<RBRACKET>{jjtThis.setRegisterNumber(regnum);
        //jjtThis.setHasReferenceRegister(false);}]	    	  
//}
  final public void statement() throws ParseException {
 /*@bgen(jjtree) Stat */
  ASTStat jjtn000 = new ASTStat(JJTSTAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        bit_sequence();
        jj_consume_token(ASSIGN);
        expression();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    jjtn000.setStatementType(RTSimGlobals.ASSIGN);
        break;
      case READ:
        jj_consume_token(READ);
        t = jj_consume_token(ID);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    jjtn000.setStatementType(RTSimGlobals.READ);
    jjtn000.setIdStr(t.image.toString());
        break;
      case WRITE:
        jj_consume_token(WRITE);
        t = jj_consume_token(ID);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    jjtn000.setStatementType(RTSimGlobals.WRITE);
    jjtn000.setIdStr(t.image.toString());
        break;
      case GOTO:
      case GO:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GOTO:
          jj_consume_token(GOTO);
          break;
        case GO:
          jj_consume_token(GO);
          jj_consume_token(TO);
          break;
        default:
          jj_la1[41] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          t = jj_consume_token(ID);
                               jjtn000.setIdStr(t.image.toString());
          break;
        case 60:
          jj_consume_token(60);
                             jjtn000.setGotoEnd();
          break;
        default:
          jj_la1[42] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    jjtn000.setStatementType(RTSimGlobals.GOTO);
        break;
      case NOP:
        jj_consume_token(NOP);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
    jjtn000.setStatementType(RTSimGlobals.NOP);
        break;
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3_1() {
    if (jj_3R_1()) return true;
    return false;
  }

  private boolean jj_3R_1() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public RTSim_ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[44];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x10000,0x0,0x0,0x0,0x0,0x0,0x8000,0x200,0x8000,0x8000,0x200,0x20000,0x80000,0x0,0x0,0x8000,0x0,0x0,0x0,0x0,0x8000,0xc0000000,0xc0000000,0x20000000,0x20000000,0x20003c0,0x10800000,0x10800000,0xc600000,0xc600000,0x3000000,0x3000000,0x20003c0,0x3c0,0x1c0,0x1c0,0x200,0x100,0x40800,0x40800,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x2000000,0x0,0x200,0x202000,0xc001c00,0xc000000,0xc000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x33c044,0x33c044,0x0,0x10,0x100,0x80,0x33c004,0x0,0x1,0x1,0x2,0x2,0x280000,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x200000,0x200000,0x0,0x0,0x200000,0x0,0x0,0x30000,0x10200000,0x33c000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public RTSim_Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public RTSim_Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RTSim_ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public RTSim_Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RTSim_ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public RTSim_Parser(RTSim_ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(RTSim_ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[61];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 44; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 61; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
