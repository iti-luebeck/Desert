/* Generated By:JJTree&JavaCC: Do not edit this line. RTSim_ParserConstants.java */
package org.desert.lexer.jcc;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface RTSim_ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 5;
  /** RegularExpression Id. */
  int BIN_NUM = 6;
  /** RegularExpression Id. */
  int HEX_NUM = 7;
  /** RegularExpression Id. */
  int DEC_NUM = 8;
  /** RegularExpression Id. */
  int LPAREN = 9;
  /** RegularExpression Id. */
  int RPAREN = 10;
  /** RegularExpression Id. */
  int LBRACKET = 11;
  /** RegularExpression Id. */
  int RBRACKET = 12;
  /** RegularExpression Id. */
  int LBRACE = 13;
  /** RegularExpression Id. */
  int RBRACE = 14;
  /** RegularExpression Id. */
  int COMMA = 15;
  /** RegularExpression Id. */
  int SEMICOLON = 16;
  /** RegularExpression Id. */
  int COLON = 17;
  /** RegularExpression Id. */
  int DOT = 18;
  /** RegularExpression Id. */
  int PIPE = 19;
  /** RegularExpression Id. */
  int ASSIGN = 20;
  /** RegularExpression Id. */
  int LE = 21;
  /** RegularExpression Id. */
  int GE = 22;
  /** RegularExpression Id. */
  int NE = 23;
  /** RegularExpression Id. */
  int PLUS = 24;
  /** RegularExpression Id. */
  int MINUS = 25;
  /** RegularExpression Id. */
  int LT = 26;
  /** RegularExpression Id. */
  int GT = 27;
  /** RegularExpression Id. */
  int EQ = 28;
  /** RegularExpression Id. */
  int AND = 29;
  /** RegularExpression Id. */
  int OR = 30;
  /** RegularExpression Id. */
  int NOR = 31;
  /** RegularExpression Id. */
  int XOR = 32;
  /** RegularExpression Id. */
  int NAND = 33;
  /** RegularExpression Id. */
  int IF = 34;
  /** RegularExpression Id. */
  int THEN = 35;
  /** RegularExpression Id. */
  int ELSE = 36;
  /** RegularExpression Id. */
  int FI = 37;
  /** RegularExpression Id. */
  int SWITCH = 38;
  /** RegularExpression Id. */
  int CASE = 39;
  /** RegularExpression Id. */
  int CASEDEFAULT = 40;
  /** RegularExpression Id. */
  int DECLARE = 41;
  /** RegularExpression Id. */
  int REGISTER = 42;
  /** RegularExpression Id. */
  int BUS = 43;
  /** RegularExpression Id. */
  int MEMORY = 44;
  /** RegularExpression Id. */
  int STORAGE = 45;
  /** RegularExpression Id. */
  int ARRAY = 46;
  /** RegularExpression Id. */
  int READ = 47;
  /** RegularExpression Id. */
  int WRITE = 48;
  /** RegularExpression Id. */
  int GOTO = 49;
  /** RegularExpression Id. */
  int GO = 50;
  /** RegularExpression Id. */
  int TO = 51;
  /** RegularExpression Id. */
  int NOT = 52;
  /** RegularExpression Id. */
  int NOP = 53;
  /** RegularExpression Id. */
  int MARKER = 54;
  /** RegularExpression Id. */
  int ID = 55;
  /** RegularExpression Id. */
  int IDENTIFIER = 56;
  /** RegularExpression Id. */
  int LETTER = 57;
  /** RegularExpression Id. */
  int PART_LETTER = 58;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "<SINGLE_LINE_COMMENT>",
    "<BIN_NUM>",
    "<HEX_NUM>",
    "<DEC_NUM>",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\",\"",
    "\";\"",
    "\":\"",
    "\".\"",
    "\"|\"",
    "\"<-\"",
    "\"<=\"",
    "\">=\"",
    "\"<>\"",
    "\"+\"",
    "\"-\"",
    "\"<\"",
    "\">\"",
    "\"=\"",
    "\"and\"",
    "\"or\"",
    "\"nor\"",
    "\"xor\"",
    "\"nand\"",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"fi\"",
    "\"switch\"",
    "\"case\"",
    "\"default\"",
    "\"declare\"",
    "\"register\"",
    "\"bus\"",
    "\"memory\"",
    "\"storage\"",
    "\"array\"",
    "\"read\"",
    "\"write\"",
    "\"goto\"",
    "\"go\"",
    "\"to\"",
    "\"not\"",
    "\"nop\"",
    "<MARKER>",
    "<ID>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<PART_LETTER>",
  };

}
