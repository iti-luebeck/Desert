/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.desert.gui;

import de.uniluebeck.iti.rteasy.kernel.ExtensionFilter;
import java.io.File;
import java.io.FileWriter;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.desert.gui//VHDL//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "VHDLTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(mode = "right", openAtStartup = false)
@ActionID(category = "Window", id = "org.desert.gui.VHDLTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_VHDLAction",
        preferredID = "VHDLTopComponent"
)
public final class VHDLTopComponent extends TopComponent {

    private ExtensionFilter fileFilter;

    public VHDLTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(VHDLTopComponent.class, "CTL_VHDLTopComponent"));
        setToolTipText(NbBundle.getMessage(VHDLTopComponent.class, "HINT_VHDLTopComponent"));
        fileFilter = new ExtensionFilter(new String[]{"vhd", "vhdl"},
                NbBundle.getMessage(VHDLTopComponent.class, "FILEDESC_VHD"));
    }

    public void setVHDLCode(String vhdl) {
        vhdlEditorPane.setText(vhdl);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        vhdlEditorPane = new javax.swing.JEditorPane();
        jPanel1 = new javax.swing.JPanel();
        copyButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();

        vhdlEditorPane.setEditable(false);
        jScrollPane1.setViewportView(vhdlEditorPane);

        org.openide.awt.Mnemonics.setLocalizedText(copyButton, org.openide.util.NbBundle.getMessage(VHDLTopComponent.class, "BUTTON_COPYALL")); // NOI18N
        copyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyButtonActionPerformed(evt);
            }
        });
        jPanel1.add(copyButton);

        org.openide.awt.Mnemonics.setLocalizedText(saveButton, org.openide.util.NbBundle.getMessage(VHDLTopComponent.class, "BUTTON_SAVE")); // NOI18N
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        jPanel1.add(saveButton);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void copyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyButtonActionPerformed
        vhdlEditorPane.selectAll();
        vhdlEditorPane.copy();
        vhdlEditorPane.select(0, 0);
    }//GEN-LAST:event_copyButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setFileFilter(fileFilter);
        int result = chooser.showSaveDialog(this);
        if (result == JFileChooser.CANCEL_OPTION) {
            return;
        }
        try {
            File f = chooser.getSelectedFile();
            if (!fileFilter.hasExtension(f)) {
                f = new File(f.getPath() + ".vhd");
            }
            String lineSep = System.getProperty("line.separator");
            String s = vhdlEditorPane.getText();
            s.replaceAll("[^.]", lineSep);
            FileWriter fw = new FileWriter(f);
            fw.write(s);
            fw.close();
        } catch (Throwable t) {
            JOptionPane.showInternalMessageDialog(this, t.getLocalizedMessage(),
                    NbBundle.getMessage(VHDLTopComponent.class, "TITLE_ERROR"),
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton copyButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton saveButton;
    private javax.swing.JEditorPane vhdlEditorPane;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
