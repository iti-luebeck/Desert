/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.desert.gui;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableCellRenderer;
import org.openide.windows.TopComponent;
import org.openide.util.lookup.Lookups;
import de.uniluebeck.iti.rteasy.RTSimGlobals;
import de.uniluebeck.iti.rteasy.SimObjectsBase;
import de.uniluebeck.iti.rteasy.kernel.BitVector;
import de.uniluebeck.iti.rteasy.kernel.RegisterArray;
import org.openide.util.NbBundle;

/**
 * Top component which displays something.
 */
@TopComponent.Description(
        preferredID = "RegArrayTopComponent",
        //TODO set Icon
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(mode = "memviewer", openAtStartup = false)
public final class RegArrayViewerTopComponent extends TopComponent {

    public RegArrayFrameTableModel model;
    public RegisterArray regarray;

    public void simUpdate() {
        model.fireTableDataChanged();
    }

    public int getPointer() {
        return regarray.getRegisterNumber();
    }

    public RegArrayViewerTopComponent() {
        initComponents();
        setToolTipText(NbBundle.getMessage(RegArrayViewerTopComponent.class, "HINT_RegArrayTopComponent"));
        putClientProperty(TopComponent.PROP_CLOSING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_MAXIMIZATION_DISABLED, Boolean.TRUE);
    }
    
    public void initRegArrayViewer(RegisterArray r) {
        this.regarray = r;
        associateLookup(Lookups.singleton(regarray));
        setName(NbBundle.getMessage(RegArrayViewerTopComponent.class, "CTL_RegArrayTopComponent") + ": " + regarray.getPrettyDecl());
        //setDisplayName("Registerarray " + regarray.getPrettyDecl());
        
        model = new RegArrayFrameTableModel(r, this);
        table.setModel(model);
        RegArrayViewerTopComponent.PointerCellRenderer pcr = new RegArrayViewerTopComponent.PointerCellRenderer();
        table.getColumnModel().getColumn(0).setCellRenderer(pcr);
        table.getColumnModel().getColumn(1).setCellRenderer(pcr);
        table.getColumnModel().getColumn(2).setCellRenderer(pcr);
        final JTextField textField = new JTextField();
        textField.setHorizontalAlignment(JTextField.RIGHT);
        table.getColumnModel().getColumn(1).setCellEditor(new DefaultCellEditor(textField));
        Dimension d = table.getPreferredSize();
        d.height = 250;
        table.setPreferredScrollableViewportSize(d);
        model.fireTableDataChanged();
        JComboBox baseBox = new JComboBox();
        baseBox.addItem(new SimObjectsBase(RTSimGlobals.BASE_BIN));
        baseBox.addItem(new SimObjectsBase(RTSimGlobals.BASE_DEC));
        baseBox.addItem(new SimObjectsBase(RTSimGlobals.BASE_HEX));
        baseBox.addItem(new SimObjectsBase(RTSimGlobals.BASE_DEC2));
        baseBox.addItem(new SimObjectsBase(RTSimGlobals.BASE_HEX2));
        table.getColumnModel().getColumn(2).setCellEditor(new DefaultCellEditor(baseBox));
        table.setCellSelectionEnabled(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(table);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
    }

    @Override
    public void componentClosed() {
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
    }

    class PointerCellRenderer extends DefaultTableCellRenderer {

        public PointerCellRenderer() {
            super();
            setBackground(Color.WHITE);
            setForeground(Color.BLACK);
        }

        @Override
        public Component getTableCellRendererComponent(JTable table,
                Object value, boolean isSelected, boolean hasFocus,
                int row, int col) {
            setBackground(null);
            setHorizontalAlignment(0);
            super.getTableCellRendererComponent(table, value,
                    isSelected, hasFocus, row, col);
            if (col == 0) {
                setHorizontalAlignment(JTextField.CENTER);
            } else {
                setHorizontalAlignment(JTextField.RIGHT);
            }
            if (row == getPointer()) {
                setBackground(Color.GREEN);
                setForeground(Color.BLACK);
            } else {
                setBackground(Color.WHITE);
                setForeground(Color.BLACK);
            }
            return this;
        }

    }
}
